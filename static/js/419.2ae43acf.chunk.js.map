{"version":3,"file":"static/js/419.2ae43acf.chunk.js","mappings":"0MAiCA,EAtBiCA,EAAAA,MAAW,YAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAE3DC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,iBAAKC,UAAW,UAAhB,WACI,gBAAKC,MAAO,CAACC,OAAQ,WAAYC,QAAS,WACtCL,EAAS,YAAD,OAAaD,KADzB,UAGI,gBAAKG,UAAW,sBAAuBI,IAAKT,GAAS,yBAA0BU,IAAI,QAEvF,4BACI,0BAAK,iBAAML,UAAW,eAAjB,SAAkCJ,OAEvC,gBAAKI,UAAW,eAAhB,SACKN,a,kDC2BrB,EAxCmCD,EAAAA,MAAW,YAAe,IAAba,EAAY,EAAZA,OAEtCC,GAAWC,EAAAA,EAAAA,MAEjB,GAIIC,EAAAA,EAAAA,IAAqB,CACrBC,aAAc,MACdC,cAAe,CACXC,QAAS,MANbC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MAQEC,EAAWF,GAAa,SAAAG,GAC1B,GAAIA,EAAKL,QAAQM,OAAQ,CACrB,IAAKD,EAAKL,QACN,OAEJL,GAASY,EAAAA,EAAAA,IAAcF,EAAKL,UAEhCG,OAGJ,OACI,gBAAKf,UAAW,aAAhB,UACI,kBAAMgB,SAAUA,EAAhB,WACI,0BAAOI,SAAqB,UAAXd,EACVe,YAAa,8GACTR,EAAS,cAEpB,mBAAQO,SAAqB,YAAXd,EAAlB,UACI,gBAAKF,IAAK,4BAA6BC,IAAI,yBCY/D,GAAeiB,EAAAA,EAAAA,IAlDE,WAEb,IAAMf,GAAWC,EAAAA,EAAAA,MACXe,GAAWC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YAC9CjB,GAASkB,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKpB,UAC5CqB,GAAgBC,EAAAA,EAAAA,QAAuB,MAC7C,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WAEN,OADAzB,GAAS0B,EAAAA,EAAAA,OACF,WACH1B,GAAS2B,EAAAA,EAAAA,UAEd,CAAC3B,KAEJyB,EAAAA,EAAAA,YAAU,WACiB,IAAD,EAAdF,IACA,UAAAH,EAAcQ,eAAd,SAAuBC,eAAe,CAACC,SAAU,cAGzD,CAACd,IAaL,OACI,iBAAKvB,UAAW,eAAhB,WACI,gBAAKA,UAAW,4BAChB,iBAAKA,UAAW,YAAasC,SAZb,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAOhC,UACKR,EAASwB,KAAI,SAACC,GAAD,OACV,SAAC,EAAD,CACStD,KAAMsD,EAAGpC,QACTjB,MAAOqD,EAAGrD,MACVC,SAAUoD,EAAGpD,SACbC,OAAQmD,EAAGnD,QAJNmD,EAAGC,QAKrB,gBAAKC,IAAKvB,QAEd,SAAC,EAAD,CAAUrB,OAAQA,W,0GCjDvB,SAASgB,EAAoB6B,GAYhC,OAXA,SAA+BC,GAI3B,OAFgB5B,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAM4B,KAAKC,YAK/C,SAACH,GAAD,UAAsBC,KAHL,SAAC,KAAD,CAAUG,GAAG","sources":["components/chat/Message.tsx","components/chat/ChatForm.tsx","components/chat/Chat.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\ntype MessageType = {\r\n    text: string,\r\n    photo: string\r\n    userName: string\r\n    userId: number\r\n}\r\n\r\nconst Message: FC<MessageType> = React.memo(({text, photo, userName, userId}) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div className={\"message\"}>\r\n            <div style={{cursor: \"pointer\"}} onClick={() => {\r\n                navigate(`/profile/${userId}`)\r\n            }}>\r\n                <img className={\"header__user_avatar\"} src={photo || \"/assets/img/avatar.jpg\"} alt=\"\"/>\r\n            </div>\r\n            <div>\r\n                <div><span className={\"message-name\"}>{userName}</span>\r\n                </div>\r\n                <div className={\"message-text\"}>\r\n                    {text}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessageTC, StatusType} from \"../../redux/reducers/chat\";\r\n\r\ntype ChatFormType = {\r\n    status: StatusType\r\n}\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst ChatForm: FC<ChatFormType> = React.memo(({status}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n    } = useForm<MessageType>({\r\n        criteriaMode: \"all\",\r\n        defaultValues: {\r\n            message: \"\"\r\n        }\r\n    });\r\n\r\n    const onSubmit = handleSubmit(data => {\r\n        if (data.message.trim()) {\r\n            if (!data.message) {\r\n                return\r\n            }\r\n            dispatch(sendMessageTC(data.message))\r\n        }\r\n        reset()\r\n    })\r\n\r\n    return (\r\n        <div className={\"chat-input\"}>\r\n            <form onSubmit={onSubmit}>\r\n                <input disabled={status !== \"ready\"}\r\n                       placeholder={\"Напишите сообщение...\"}\r\n                       {...register(\"message\")}\r\n                />\r\n                <button disabled={status === \"pending\"}>\r\n                    <img src={\"/assets/svg/arrow-big.svg\"} alt=\"sendButton\"/>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default ChatForm;","import React, {FC, useEffect, useRef, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport Message from \"./Message\";\r\nimport {WithAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../redux/reducers/chat\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport ChatForm from \"./ChatForm\";\r\n\r\nconst Chat: FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const messages = useAppSelector(state => state.chat.messages)\r\n    const status = useAppSelector(state => state.chat.status)\r\n    const chatAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n            if (isAutoScroll) {\r\n                chatAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n            }\r\n        },\r\n        [messages])\r\n\r\n    // callbacks\r\n\r\n    const onScrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 500) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"chat-content\"}>\r\n            <div className={\"chat-message-top-block\"}/>\r\n            <div className={\"chat-text\"} onScroll={onScrollHandler}>\r\n                {messages.map((el) =>\r\n                    <Message key={el.id}\r\n                             text={el.message}\r\n                             photo={el.photo}\r\n                             userName={el.userName}\r\n                             userId={el.userId}/>)}\r\n                <div ref={chatAnchorRef}/>\r\n            </div>\r\n            <ChatForm status={status}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WithAuthRedirect(Chat)","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useAppSelector} from \"../../redux/store\";\r\n\r\nexport function WithAuthRedirect<T>(WrappedComponent: ComponentType<T>) {\r\n    function ComponentWithRedirect(props: T) {\r\n\r\n        const isLogin = useAppSelector(state => state.auth.isLogin)\r\n\r\n        if (!isLogin) return <Navigate to=\"/login\"/>\r\n\r\n        return (\r\n            <WrappedComponent {...props}/>\r\n        )\r\n    }\r\n\r\n    return ComponentWithRedirect\r\n}"],"names":["React","text","photo","userName","userId","navigate","useNavigate","className","style","cursor","onClick","src","alt","status","dispatch","useDispatch","useForm","criteriaMode","defaultValues","message","register","handleSubmit","reset","onSubmit","data","trim","sendMessageTC","disabled","placeholder","WithAuthRedirect","messages","useAppSelector","state","chat","chatAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","startMessagesListening","stopMessagesListening","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","el","id","ref","WrappedComponent","props","auth","isLogin","to"],"sourceRoot":""}