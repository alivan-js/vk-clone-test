{"version":3,"file":"static/js/251.096e9e47.chunk.js","mappings":"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","sources":["components/hoc/withAuthRedirect.tsx","webpack://vk-clone/./src/components/users/Users.module.scss?b897","components/users/User.tsx","components/users/UsersSearchForm.tsx","components/users/Users.tsx","utils/useOnScreen.ts"],"sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useAppSelector} from \"../../redux/store\";\r\n\r\nexport function WithAuthRedirect<T>(WrappedComponent: ComponentType<T>) {\r\n    function ComponentWithRedirect(props: T) {\r\n\r\n        const isLogin = useAppSelector(state => state.auth.isLogin)\r\n\r\n        if (!isLogin) return <Navigate to=\"/login\"/>\r\n\r\n        return (\r\n            <WrappedComponent {...props}/>\r\n        )\r\n    }\r\n\r\n    return ComponentWithRedirect\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Users_content__5k+U+\",\"filter\":\"Users_filter__0w582\",\"body\":\"Users_body__G7hJX\",\"user\":\"Users_user__sxjid\",\"user__logo\":\"Users_user__logo__d7MZA\",\"user__body\":\"Users_user__body__4HLHO\",\"user__name\":\"Users_user__name__Bp0T1\",\"user__button\":\"Users_user__button__QBdpi\",\"user__button__isLoading\":\"Users_user__button__isLoading__zBsjs\",\"form\":\"Users_form__fg+nk\"};","import React, {FC} from 'react';\r\nimport s from \"./Users.module.scss\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchFollowing, fetchUnfollowing} from \"../../redux/reducers/users\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport userAvatar from \"../../assets/img/avatar.jpg\"\r\n\r\n\r\ntype UserType = {\r\n    id: number\r\n    img: string | null\r\n    name: string\r\n    isFollowed: boolean\r\n}\r\n\r\nconst User: FC<UserType> = React.memo(({img, name, isFollowed, id}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoading = useAppSelector(state => state.users.isFollowingInProgress)\r\n\r\n    // callbacks\r\n\r\n    const onClickFollowHandler = () => {\r\n        dispatch(fetchFollowing(id))\r\n    }\r\n\r\n    const onClickUnfollowHandler = () => {\r\n        dispatch(fetchUnfollowing(id))\r\n    }\r\n\r\n    return (\r\n        <div className={s.user}>\r\n            <NavLink to={`/profile/${id}`}>\r\n                <img className={s.user__logo}\r\n                     src={img ? img : userAvatar} alt={\"UserLogo\"}/>\r\n            </NavLink>\r\n            <div className={s.user__body}>\r\n                <NavLink to={`/profile/${id}`}><span className={s.user__name}>{name}</span></NavLink>\r\n                {isFollowed\r\n                    ? <span className={`${s.user__button} ${isLoading.id === id ? s.user__button__isLoading : \"\"}`}\r\n                            onClick={onClickUnfollowHandler}>Отписаться</span>\r\n                    : <span className={`${s.user__button} ${isLoading.id === id ? s.user__button__isLoading : \"\"}`}\r\n                            onClick={onClickFollowHandler}>Подписаться</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default User;","import React, {FC, useEffect} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Nullable} from \"../../redux/store\";\r\nimport {FilterType} from \"../../redux/reducers/users\";\r\nimport s from \"./Users.module.scss\"\r\n\r\ntype UsersSearchFormType = {\r\n    filter: {\r\n        term: string,\r\n        friend: Nullable<boolean>\r\n    },\r\n    changeFilter: (filter: FilterType) => void\r\n}\r\n\r\ntype filterType = {\r\n    term: string\r\n    friend: string\r\n}\r\n\r\nexport const UsersSearchForm: FC<UsersSearchFormType> = React.memo(({filter, changeFilter}) => {\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setValue\r\n    } = useForm<filterType>({\r\n        criteriaMode: \"all\",\r\n        defaultValues: {\r\n            term: filter.term,\r\n            friend: JSON.stringify(filter.friend)\r\n        }\r\n    })\r\n\r\n    const onSubmit = handleSubmit(data => {\r\n            const friend = data.friend === \"null\" ? null : data.friend === \"true\"\r\n            changeFilter({term: data.term, friend})\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        const friend = filter.friend === null ? \"null\" : JSON.stringify(filter.friend)\r\n        if (filter) {\r\n            setValue(\"term\", filter.term)\r\n            setValue(\"friend\", friend)\r\n        }\r\n    }, [filter]);\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div className={s.form}>\r\n                <input\r\n                    placeholder={\"Введите имя пользователя\"}\r\n                    {...register(\"term\")}\r\n                />\r\n                <select {...register(\"friend\")}>\r\n                    <option value={\"null\"}>Все</option>\r\n                    <option value={\"true\"}>Подписки</option>\r\n                    <option value={\"false\"}>Другие</option>\r\n                </select>\r\n                <button className={\"button_find\"}>Найти</button>\r\n            </div>\r\n        </form>\r\n    );\r\n})","import React, {useRef, MutableRefObject, FC, useCallback, useEffect, useState} from 'react';\r\nimport s from \"./Users.module.scss\"\r\nimport {useAppSelector} from \"../../redux/store\";\r\nimport User from './User';\r\nimport {WithAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\nimport {clearUsers, fetchUsers, FilterType, setFilter, setPage} from \"../../redux/reducers/users\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {UsersSearchForm} from './UsersSearchForm';\r\nimport {useSearchParams} from 'react-router-dom';\r\nimport {useOnScreen} from '../../utils/useOnScreen';\r\n\r\nconst Users: FC = () => {\r\n\r\n    const observedElement = useRef() as MutableRefObject<HTMLInputElement>\r\n    const dispatch = useDispatch()\r\n    const page = useAppSelector(state => state.users.page)\r\n    const totalPage = useAppSelector(state => state.users.totalItems)\r\n    const users = useAppSelector(state => state.users.users)\r\n    const filter = useAppSelector(state => state.users.filter)\r\n    const [searchParams, setSearchParams] = useSearchParams()\r\n    const [isFetchedUsers, setIsFetchedUsers] = useState(false)\r\n    const [isFilterFetched, setIsFilterFetched] = useState(false)\r\n    const isOnScreen = useOnScreen(observedElement);\r\n\r\n    useEffect(() => {\r\n        const parsed = Object.fromEntries(searchParams)\r\n\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(fetchUsers(1, actualFilter))\r\n\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n\r\n        const query: any = {}\r\n\r\n        if (filter.term) {query.term = filter.term}\r\n\r\n        if (filter.friend !== null) {query.friend = String(filter.friend)}\r\n\r\n        setSearchParams({term: query.term ? query.term : \"\", friend: query.friend ? query.friend : null})\r\n\r\n    }, [filter])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(clearUsers())\r\n            dispatch(setFilter({term: \"\", friend: null}))\r\n            dispatch(setPage(1))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!isFetchedUsers) {\r\n            setIsFetchedUsers(true)\r\n            return\r\n        }\r\n        if (!isFilterFetched) {\r\n            setIsFilterFetched(true)\r\n            return\r\n        }\r\n        dispatch(fetchUsers(page, filter))\r\n    }, [filter, page])\r\n\r\n    useEffect(() => {\r\n        if ((page < (Math.ceil(totalPage / 10))) && isOnScreen) {\r\n            dispatch(setPage(page + 1))\r\n        }\r\n    }, [isOnScreen])\r\n\r\n    // callbacks\r\n\r\n    const changeFilterCallback = useCallback((filter: FilterType) => {\r\n        dispatch(setFilter(filter))\r\n        dispatch(setPage(1))\r\n        dispatch(clearUsers())\r\n    }, [dispatch, filter])\r\n\r\n    return (\r\n        <>\r\n            <UsersSearchForm changeFilter={changeFilterCallback} filter={filter}/>\r\n            <div className={s.content}>\r\n                <div className={s.body}>\r\n                    {users.map(el => {\r\n                            return <User key={el.id} img={el.photos?.small} name={el.name} isFollowed={el.followed}\r\n                                         id={el.id}/>\r\n                        }\r\n                    )}\r\n                    <div ref={observedElement}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default compose(WithAuthRedirect)(Users)","import {useEffect, useState, useRef, MutableRefObject} from 'react';\r\n\r\nexport function useOnScreen(ref: MutableRefObject<HTMLInputElement>) {\r\n    const [isOnScreen, setIsOnScreen] = useState(false);\r\n    const observerRef = useRef<null | IntersectionObserver>(null);\r\n\r\n    useEffect(() => {\r\n\r\n        observerRef.current = new IntersectionObserver(([entry]) =>\r\n            setIsOnScreen(entry.isIntersecting)\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        observerRef.current?.observe(ref.current);\r\n\r\n        return () => {\r\n\r\n            observerRef.current?.disconnect();\r\n        };\r\n    }, [ref]);\r\n\r\n    return isOnScreen;\r\n}"],"names":["WithAuthRedirect","WrappedComponent","props","useAppSelector","state","auth","isLogin","to","React","img","name","isFollowed","id","dispatch","useDispatch","isLoading","users","isFollowingInProgress","className","s","src","userAvatar","alt","onClick","fetchUnfollowing","fetchFollowing","UsersSearchForm","filter","changeFilter","useForm","criteriaMode","defaultValues","term","friend","JSON","stringify","register","handleSubmit","setValue","onSubmit","data","useEffect","placeholder","value","compose","observedElement","useRef","page","totalPage","totalItems","useSearchParams","searchParams","setSearchParams","useState","isFetchedUsers","setIsFetchedUsers","isFilterFetched","setIsFilterFetched","isOnScreen","ref","setIsOnScreen","observerRef","current","IntersectionObserver","entry","isIntersecting","observe","disconnect","useOnScreen","parsed","Object","fromEntries","actualFilter","fetchUsers","query","String","clearUsers","setFilter","setPage","Math","ceil","changeFilterCallback","useCallback","map","el","photos","small","followed"],"sourceRoot":""}